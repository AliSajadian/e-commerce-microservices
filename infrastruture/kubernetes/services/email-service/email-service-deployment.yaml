# Email Service Deployment (Stateless)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: email-service-deploy
  namespace: books-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: email-service
  template:
    metadata:
      labels:
        app: email-service
    spec:
      containers:
        - name: email-service
          image: docker.io/library/email_service_image:latest # Replace with your image
          imagePullPolicy: Never
          ports:
            - name: http-api
              containerPort: 8000
          env:
            - name: RABBITMQ_HOST
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: RABBITMQ_HOST
            - name: RABBITMQ_PORT
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: RABBITMQ_PORT
            - name: RABBITMQ_USER
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: RABBITMQ_USER # Assuming you add this to app-secrets
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: RABBITMQ_PASSWORD
          envFrom:
            - configMapRef:
                name: app-config
            - secretRef:
                name: app-secrets
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
          livenessProbe: # Simple HTTP health check if your email service has one
            httpGet:
              path: /health
              port: http-api # Assuming it exposes a health check endpoint
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /ready
              port: http-api
            initialDelaySeconds: 15
            periodSeconds: 5
